<?php

namespace AppBundle\Repository;

/**
 * PublicationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PublicationRepository extends \Doctrine\ORM\EntityRepository
{
//    public function findAll()
//    {
//        return parent::findBy(['enabled' => true]);
//    }

    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        if (!isset($criteria['enabled'])){
            $criteria['enabled'] = true;
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $expr = $this->getEntityManager()->getExpressionBuilder();

        $qb->select( 'p' )
            ->from( 'AppBundle:Publication', 'p' );

        foreach ( $criteria as $field => $value ) {

            if (is_object($value)){
                $qb->andWhere('p.' . $field .' = '."'" . $value->getId() ."'" );
            }else{
                $qb->andWhere('p.' . $field .' = '."'" . $value ."'" );
            }
        }

        $d = new \DateTime();
        $qb->andWhere( 'p.created <='."'".$d->format('Y-m-d H:i:s')."'");

        if ( $orderBy ) {

            foreach ( $orderBy as $field => $order ) {

                $qb->addOrderBy( 'p.' . $field, $order );
            }
        }

        if ( $limit )
            $qb->setMaxResults( $limit );

        if ( $offset )
            $qb->setFirstResult( $offset );

//        echo $qb->getQuery()->getSQL();
        return $qb->getQuery()
            ->getResult();
    }

    public function search($query, $st = true){
        $qb = $this->createQueryBuilder('s');
        $qb->select('s');
        $qb->where("s.title LIKE '%$query%'")
            ->orWhere("s.body  LIKE '%$query%' ");
        if ($st == true){
            $qb->andWhere("s.enabled = 1");
        }
        $qb->orderBy('s.created', 'DESC');
        $result = $qb->getQuery()->getResult();

        return $result;
    }

    public function findFeaturedPublications(\DateTime $date, $specialties, $limit){
        if ($specialties == null){
            return [];
        }
        $specialtyFilter = '';
        foreach ($specialties as $spec){
            $specialtyFilter .= '( specialties.id =  '.$spec->getId().' )';
            $specialtyFilter .=  ' OR ';
        }
        $specialtyFilter = substr($specialtyFilter, 0, -4);

        $qb = $this->createQueryBuilder('p');
        $qb->select('p');
        $qb->leftJoin('p.specialties','specialties');
        $qb->where('p.enabled = true');
        $qb->andWhere($specialtyFilter);
        $qb->andWhere('p.created <= :date');

        $qb->setParameter(':date', $date->format('Y-m-d').' 23:59:59');

        $qb->groupBy('p.id');
        $qb->orderBy('p.created', 'DESC');
        $qb->setMaxResults($limit);
        $result = $qb->getQuery()->getResult();

        return $result;
    }

}
